import { Injectable } from '@angular/core';
import { SessionFlowService } from '../session-flow/session-flow.service';
import { ConnectService } from './Connect.service';



@Injectable({
  providedIn: 'root'
})
export class ConnectorService {

  // User visited router
  private sfVisitedRoutes: any;
 
  // User performed clicks
  private sfUserClicks: any; 


  constructor(private connectService: ConnectService ) {}

  /**
   * Connect [Session-flow]{@link https://www.npmjs.com/package/@nodeart/session-flow} to databese. 
   * 
   * @param {SessionFlow} sessionFlow  SessionFlow service
   * @param {string} deviceId  User device id generated by SessionFlow 
   * @param {string} sessionId  User session id generated by SessionFlow
   * 
   */
  connectSessionFlowToDB(sessionFlow: SessionFlowService, deviceId: string, sessionId:string) {
    this.sfVisitedRoutes = this.connectService.database().ref('/session-flows/' + deviceId + '/' + sessionId + '/visitedRoutes');
    this.sfUserClicks = this.connectService.database().ref('/session-flows/' + deviceId + '/' + sessionId + '/userClicks');  
    this.listenSfObject(sessionFlow);
  }

  /**
   * Check old session flow using device id
   * 
   * @param {string} deviceId  User device Id
   */
  // checkOldSessionFlow(deviceId: string){
  //   if(localStorage.getItem("oldSessionFlow")){
  //     let oldSessionFlow = JSON.parse(localStorage.getItem("oldSessionFlow"));
  //     let sessionId = oldSessionFlow.sessionId;
  //     delete oldSessionFlow.sessionId;
  //     this.database.ref('/session-flows/' + deviceId + '/' + sessionId).set(oldSessionFlow);
  //   }
  // }
  checkOldSessionFlow(deviceId: string){
    const oldSessionFlowJSON = localStorage.getItem("oldSessionFlow");
    if (oldSessionFlowJSON !== null) {
      const oldSessionFlow = JSON.parse(oldSessionFlowJSON);
      const sessionId = oldSessionFlow.sessionId;
      delete oldSessionFlow.sessionId;
      this.connectService.database().ref('/session-flows/' + deviceId + '/' + sessionId).set(oldSessionFlow);
    }
  }

  /**
   * Subscribes to user visited routes and clicks
   * 
   * @param {SessionFlow} sf  SessionFlow service
   */
  private listenSfObject(sf: SessionFlowService) {
    sf.visitedRoute.subscribe((value) => {
      this.sfVisitedRoutes.push(value.getStringObject()); 
    });

    sf.click.asObservable().subscribe((value) => {
      this.sfUserClicks.push(value.getStringObject());
    });
  }







}
